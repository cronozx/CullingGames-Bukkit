plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'cronozx'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "sqlite"
        url = "https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc"
    }
    maven {
        name = "nexo"
        url = "https://repo.nexomc.com/releases"
    }
    maven {
        name = 'crazycrewReleases'
        url = uri('https://repo.crazycrew.us/releases')
        content {
            includeModule 'com.badbones69.crazyenvoys', 'crazyenvoys-paper-api'
        }
    }
    maven {
        name = "jitpack"
        url = 'https://jitpack.io'
    }
    maven {
        name = "auxilor"
        url = "https://repo.auxilor.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly("com.nexomc:nexo:0.7.0")
    implementation 'redis.clients:jedis:5.2.0'
    implementation 'org.apache.commons:commons-pool2:2.12.0'
    implementation('org.jetbrains:annotations:24.0.1')
    compileOnly('com.badbones69.crazyenvoys:crazyenvoys-paper-api:1.8.2') {
        transitive = false
    }
    compileOnly "com.willfp:EcoBits:1.8.4"
    compileOnly "com.willfp:eco:6.75.2"
    compileOnly("com.willfp:EcoPets:2.74.0")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveClassifier.set('')
    mergeServiceFiles()
}